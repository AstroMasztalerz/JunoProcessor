
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.imgscalr.Scalr;



public class GUI_Window extends javax.swing.JFrame {

    /**
     * Creates new form GUI_Window
     */
    public GUI_Window() {
        initComponents();
        
    }
public int Amount=0;
public int radius=0;
public String tempPath="";
public String inputPathBatch;
public String outputPathBatch;
public float R=0;
public float G=0;
public float B=0;
public float contrast=100;
public float brightness=100;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorSliderFrame = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        RSlider = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        GSlider = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        BSlider = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        Preview_ColourBalanceButton = new javax.swing.JButton();
        Apply_ColourBalanceButton1 = new javax.swing.JButton();
        fileChooser = new javax.swing.JFileChooser();
        buttonGroup4 = new javax.swing.ButtonGroup();
        ContrastFrame = new javax.swing.JFrame();
        jPanel3 = new javax.swing.JPanel();
        ContrastSlider = new javax.swing.JSlider();
        BrightnessSlider = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Preview_ContrastButton = new javax.swing.JButton();
        Apply_ContrastButton = new javax.swing.JButton();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        SharpenAndDenoiseFrame = new javax.swing.JFrame();
        ProcessingValuesPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ApplyProcessingParamButton = new javax.swing.JButton();
        AmountSlider = new javax.swing.JSlider();
        RadiusSlider = new javax.swing.JSlider();
        AmountLabel = new javax.swing.JTextField();
        RadiusLabel = new javax.swing.JTextField();
        HelpFrame = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        HelpTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LBL_TextArea = new javax.swing.JTextArea();
        Red_Button = new javax.swing.JRadioButton();
        Green_Button = new javax.swing.JRadioButton();
        Blue_Button = new javax.swing.JRadioButton();
        RGB_Button = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        File_Menu = new javax.swing.JMenu();
        LoadPNGButton = new javax.swing.JMenuItem();
        LoadLBLButton = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        SaveButton = new javax.swing.JMenuItem();
        SaveRGB = new javax.swing.JMenuItem();
        Processing_Menu = new javax.swing.JMenu();
        RGB_Combine_Variable = new javax.swing.JMenuItem();
        BalanceButton = new javax.swing.JMenuItem();
        AutoStretchButton = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        ManualColorBalanceButton = new javax.swing.JMenuItem();
        ManualContrastButton = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        SetProcessingParamButton = new javax.swing.JMenuItem();
        SharpenButton = new javax.swing.JMenuItem();
        Denoise_Button = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        Reset_Button = new javax.swing.JMenuItem();
        SettingsMenu = new javax.swing.JMenu();
        IMGPathButton = new javax.swing.JMenuItem();
        SetDefaultPathToIMGLoaderButton = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        CH4Checkbox = new javax.swing.JCheckBoxMenuItem();
        CH4_Aligment_Checkbox = new javax.swing.JCheckBoxMenuItem();
        BatchMenu = new javax.swing.JMenu();
        BatchInputButton = new javax.swing.JMenuItem();
        BatchOutputButton = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        BatchExecButton = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        FAQButton = new javax.swing.JMenuItem();

        colorSliderFrame.setTitle("Color balance tool");
        colorSliderFrame.setResizable(false);
        colorSliderFrame.setSize(new java.awt.Dimension(400, 300));

        jPanel2.setBackground(new java.awt.Color(22, 28, 31));

        RSlider.setBackground(new java.awt.Color(38, 45, 48));
        RSlider.setForeground(new java.awt.Color(38, 45, 48));
        RSlider.setValue(0);
        RSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                RSliderStateChanged(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("R");

        GSlider.setBackground(new java.awt.Color(38, 45, 48));
        GSlider.setForeground(new java.awt.Color(38, 45, 48));
        GSlider.setValue(0);
        GSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GSliderStateChanged(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("G");

        BSlider.setBackground(new java.awt.Color(38, 45, 48));
        BSlider.setForeground(new java.awt.Color(38, 45, 48));
        BSlider.setValue(0);
        BSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BSliderStateChanged(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("B");

        Preview_ColourBalanceButton.setBackground(new java.awt.Color(38, 45, 48));
        Preview_ColourBalanceButton.setForeground(new java.awt.Color(255, 255, 255));
        Preview_ColourBalanceButton.setText("Preview");
        Preview_ColourBalanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Preview_ColourBalanceButtonActionPerformed(evt);
            }
        });

        Apply_ColourBalanceButton1.setBackground(new java.awt.Color(38, 45, 48));
        Apply_ColourBalanceButton1.setForeground(new java.awt.Color(255, 255, 255));
        Apply_ColourBalanceButton1.setText("Apply");
        Apply_ColourBalanceButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Apply_ColourBalanceButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(Preview_ColourBalanceButton)
                        .addGap(26, 26, 26)
                        .addComponent(Apply_ColourBalanceButton1)))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(RSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Preview_ColourBalanceButton)
                    .addComponent(Apply_ColourBalanceButton1))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout colorSliderFrameLayout = new javax.swing.GroupLayout(colorSliderFrame.getContentPane());
        colorSliderFrame.getContentPane().setLayout(colorSliderFrameLayout);
        colorSliderFrameLayout.setHorizontalGroup(
            colorSliderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorSliderFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        colorSliderFrameLayout.setVerticalGroup(
            colorSliderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorSliderFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ContrastFrame.setTitle("Color balance tool");
        ContrastFrame.setResizable(false);
        ContrastFrame.setSize(new java.awt.Dimension(400, 300));

        jPanel3.setBackground(new java.awt.Color(22, 28, 31));

        ContrastSlider.setBackground(new java.awt.Color(38, 45, 48));
        ContrastSlider.setForeground(new java.awt.Color(38, 45, 48));
        ContrastSlider.setMaximum(200);
        ContrastSlider.setValue(100);
        ContrastSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ContrastSliderStateChanged(evt);
            }
        });

        BrightnessSlider.setBackground(new java.awt.Color(38, 45, 48));
        BrightnessSlider.setForeground(new java.awt.Color(38, 45, 48));
        BrightnessSlider.setMaximum(200);
        BrightnessSlider.setToolTipText("");
        BrightnessSlider.setValue(100);
        BrightnessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BrightnessSliderStateChanged(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Contrast");

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Brightness");

        Preview_ContrastButton.setBackground(new java.awt.Color(38, 45, 48));
        Preview_ContrastButton.setForeground(new java.awt.Color(255, 255, 255));
        Preview_ContrastButton.setText("Preview");
        Preview_ContrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Preview_ContrastButtonActionPerformed(evt);
            }
        });

        Apply_ContrastButton.setBackground(new java.awt.Color(38, 45, 48));
        Apply_ContrastButton.setForeground(new java.awt.Color(255, 255, 255));
        Apply_ContrastButton.setText("Apply");
        Apply_ContrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Apply_ContrastButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ContrastSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BrightnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(Preview_ContrastButton)
                        .addGap(26, 26, 26)
                        .addComponent(Apply_ContrastButton)))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(ContrastSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BrightnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(64, 64, 64)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Preview_ContrastButton)
                    .addComponent(Apply_ContrastButton))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ContrastFrameLayout = new javax.swing.GroupLayout(ContrastFrame.getContentPane());
        ContrastFrame.getContentPane().setLayout(ContrastFrameLayout);
        ContrastFrameLayout.setHorizontalGroup(
            ContrastFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContrastFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ContrastFrameLayout.setVerticalGroup(
            ContrastFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContrastFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        SharpenAndDenoiseFrame.setTitle("Sharpening/Denoising parameter setup");
        SharpenAndDenoiseFrame.setResizable(false);
        SharpenAndDenoiseFrame.setSize(new java.awt.Dimension(400, 300));
        SharpenAndDenoiseFrame.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                SharpenAndDenoiseFrameComponentResized(evt);
            }
        });

        ProcessingValuesPanel.setBackground(new java.awt.Color(22, 28, 31));
        ProcessingValuesPanel.setPreferredSize(new java.awt.Dimension(640, 480));
        ProcessingValuesPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                ProcessingValuesPanelComponentResized(evt);
            }
        });

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Radius");

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Strength");

        ApplyProcessingParamButton.setBackground(new java.awt.Color(38, 45, 48));
        ApplyProcessingParamButton.setForeground(new java.awt.Color(255, 255, 255));
        ApplyProcessingParamButton.setText("Apply");
        ApplyProcessingParamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyProcessingParamButtonActionPerformed(evt);
            }
        });

        AmountSlider.setBackground(new java.awt.Color(38, 45, 48));
        AmountSlider.setForeground(new java.awt.Color(38, 45, 48));
        AmountSlider.setMajorTickSpacing(1);
        AmountSlider.setMaximum(5);
        AmountSlider.setPaintTicks(true);
        AmountSlider.setSnapToTicks(true);
        AmountSlider.setToolTipText("Amount of processing  tool to apply (Sharpening and denoising)");
        AmountSlider.setValue(0);
        AmountSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                AmountSliderStateChanged(evt);
            }
        });

        RadiusSlider.setBackground(new java.awt.Color(38, 45, 48));
        RadiusSlider.setForeground(new java.awt.Color(38, 45, 48));
        RadiusSlider.setMajorTickSpacing(1);
        RadiusSlider.setMaximum(10);
        RadiusSlider.setPaintTicks(true);
        RadiusSlider.setSnapToTicks(true);
        RadiusSlider.setToolTipText("Radius of processing tool to apply (Sharpening and denoising)");
        RadiusSlider.setValue(0);
        RadiusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                RadiusSliderStateChanged(evt);
            }
        });

        AmountLabel.setEditable(false);
        AmountLabel.setBackground(new java.awt.Color(38, 45, 48));
        AmountLabel.setForeground(new java.awt.Color(240, 240, 240));
        AmountLabel.setText("0");
        AmountLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AmountLabelActionPerformed(evt);
            }
        });

        RadiusLabel.setEditable(false);
        RadiusLabel.setBackground(new java.awt.Color(38, 45, 48));
        RadiusLabel.setForeground(new java.awt.Color(240, 240, 240));
        RadiusLabel.setText("0");
        RadiusLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadiusLabelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProcessingValuesPanelLayout = new javax.swing.GroupLayout(ProcessingValuesPanel);
        ProcessingValuesPanel.setLayout(ProcessingValuesPanelLayout);
        ProcessingValuesPanelLayout.setHorizontalGroup(
            ProcessingValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProcessingValuesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ProcessingValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ProcessingValuesPanelLayout.createSequentialGroup()
                        .addGroup(ProcessingValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(2, 2, 2)
                        .addGroup(ProcessingValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AmountSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(RadiusSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(ProcessingValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RadiusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ApplyProcessingParamButton, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        ProcessingValuesPanelLayout.setVerticalGroup(
            ProcessingValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProcessingValuesPanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(ProcessingValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(RadiusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RadiusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(ProcessingValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AmountSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(AmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(83, 83, 83)
                .addComponent(ApplyProcessingParamButton)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SharpenAndDenoiseFrameLayout = new javax.swing.GroupLayout(SharpenAndDenoiseFrame.getContentPane());
        SharpenAndDenoiseFrame.getContentPane().setLayout(SharpenAndDenoiseFrameLayout);
        SharpenAndDenoiseFrameLayout.setHorizontalGroup(
            SharpenAndDenoiseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SharpenAndDenoiseFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ProcessingValuesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE))
        );
        SharpenAndDenoiseFrameLayout.setVerticalGroup(
            SharpenAndDenoiseFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SharpenAndDenoiseFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ProcessingValuesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        HelpFrame.setSize(new java.awt.Dimension(600, 480));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        HelpTextArea.setEditable(false);
        HelpTextArea.setColumns(20);
        HelpTextArea.setRows(5);
        HelpTextArea.setText("FAQ:\n1) What are the supported file formats?\n- .PNG and .IMG with .LBL in PDS2 format for input, .PNG for output\n2) What are the processing functions and what do they do?\n-They're used to perform operations on RAW images to process them. They range from creating color composite images from monochrome images \n(RGB Combine) up to corrrecting contrast and gamma of the image or the color balance. It's best to play around with them to get a feeling for what works the best\nhowever the program does support pre-defined automatic adjustments such as auto contrast or auto color balance.\n3) How to conduct Batch processing?\n-Put all the files you want to process into a single folder. Go to Batch/setInputFolder and navigate to folder where your images are located. Click OK\nNow click setOutputFolder and navigate to folder where you want your output images to go. Remeber that for batch processing images have to be PNG format\n\n");
        jScrollPane3.setViewportView(HelpTextArea);

        javax.swing.GroupLayout HelpFrameLayout = new javax.swing.GroupLayout(HelpFrame.getContentPane());
        HelpFrame.getContentPane().setLayout(HelpFrameLayout);
        HelpFrameLayout.setHorizontalGroup(
            HelpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 784, Short.MAX_VALUE)
        );
        HelpFrameLayout.setVerticalGroup(
            HelpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(38, 45, 48));
        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));

        jPanel1.setBackground(new java.awt.Color(22, 28, 31));
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentResized(evt);
            }
        });

        LBL_TextArea.setEditable(false);
        LBL_TextArea.setBackground(new java.awt.Color(38, 45, 48));
        LBL_TextArea.setColumns(20);
        LBL_TextArea.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        LBL_TextArea.setForeground(new java.awt.Color(255, 255, 255));
        LBL_TextArea.setRows(5);
        LBL_TextArea.setText("Display Image LBL here, with metadata");
        LBL_TextArea.setToolTipText("This is a field where LBL image data will be displayed after it is loaded using File/LoadLBL");
        LBL_TextArea.setCaretColor(new java.awt.Color(255, 255, 255));
        LBL_TextArea.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(LBL_TextArea);

        Red_Button.setBackground(new java.awt.Color(38, 45, 48));
        buttonGroup4.add(Red_Button);
        Red_Button.setForeground(new java.awt.Color(240, 240, 240));
        Red_Button.setText("RED");
        Red_Button.setToolTipText("Select RED spectral channel");
        Red_Button.setEnabled(false);
        Red_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Red_ButtonActionPerformed(evt);
            }
        });

        Green_Button.setBackground(new java.awt.Color(38, 45, 48));
        buttonGroup4.add(Green_Button);
        Green_Button.setForeground(new java.awt.Color(240, 240, 240));
        Green_Button.setText("GREEN");
        Green_Button.setToolTipText("Select GREEN spectral channel");
        Green_Button.setEnabled(false);
        Green_Button.setOpaque(false);
        Green_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Green_ButtonActionPerformed(evt);
            }
        });

        Blue_Button.setBackground(new java.awt.Color(38, 45, 48));
        buttonGroup4.add(Blue_Button);
        Blue_Button.setForeground(new java.awt.Color(240, 240, 240));
        Blue_Button.setText("BLUE");
        Blue_Button.setToolTipText("Select BLUE spectral channel");
        Blue_Button.setEnabled(false);
        Blue_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Blue_ButtonActionPerformed(evt);
            }
        });

        RGB_Button.setBackground(new java.awt.Color(38, 45, 48));
        buttonGroup4.add(RGB_Button);
        RGB_Button.setForeground(new java.awt.Color(240, 240, 240));
        RGB_Button.setText("RGB");
        RGB_Button.setToolTipText("Select RGB Composite channel (Requires RGB Combination to be conducted first, via Processing/RGB Combine button)");
        RGB_Button.setEnabled(false);
        RGB_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RGB_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(22, 28, 31));
        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setOpaque(true);
        jScrollPane2.setViewportView(jLabel1);
        jLabel1.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Green_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Red_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Blue_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RGB_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(32, 32, 32))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(Red_Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Green_Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Blue_Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RGB_Button)
                .addGap(0, 466, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(38, 45, 48));
        jMenuBar1.setBorder(null);

        File_Menu.setBackground(new java.awt.Color(22, 28, 31));
        File_Menu.setForeground(new java.awt.Color(240, 240, 240));
        File_Menu.setText("File");
        File_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_MenuActionPerformed(evt);
            }
        });

        LoadPNGButton.setText("Load IMG/PNG");
        LoadPNGButton.setToolTipText("Load a .IMG or  .PNG JunoCam RAW image.");
        LoadPNGButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadPNGButtonActionPerformed(evt);
            }
        });
        File_Menu.add(LoadPNGButton);

        LoadLBLButton.setText("Load LBL");
        LoadLBLButton.setToolTipText("Open the Label file corresponding to image. Required to load .IMG files, auxilary for PNG files.");
        LoadLBLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadLBLButtonActionPerformed(evt);
            }
        });
        File_Menu.add(LoadLBLButton);
        File_Menu.add(jSeparator1);

        SaveButton.setText("Save PNG");
        SaveButton.setToolTipText("Save currently previewed image to chosen location");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        File_Menu.add(SaveButton);

        SaveRGB.setText("Save R/G/B");
        SaveRGB.setToolTipText("Save each of R, G and B channel images separately in chosen location");
        SaveRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveRGBActionPerformed(evt);
            }
        });
        File_Menu.add(SaveRGB);

        jMenuBar1.add(File_Menu);

        Processing_Menu.setBackground(new java.awt.Color(22, 28, 31));
        Processing_Menu.setForeground(new java.awt.Color(240, 240, 240));
        Processing_Menu.setText("Processing");
        Processing_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Processing_MenuActionPerformed(evt);
            }
        });

        RGB_Combine_Variable.setText("RGB Combine");
        RGB_Combine_Variable.setToolTipText("Combine R, G and B spectral framelets into a single RGB Composite image with aligned channels.");
        RGB_Combine_Variable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RGB_Combine_VariableActionPerformed(evt);
            }
        });
        Processing_Menu.add(RGB_Combine_Variable);

        BalanceButton.setText("Auto Color Balance");
        BalanceButton.setToolTipText("Basic colour calibration of the RGB image. Apply RGB Combine first to access.");
        BalanceButton.setEnabled(false);
        BalanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BalanceButtonActionPerformed(evt);
            }
        });
        Processing_Menu.add(BalanceButton);

        AutoStretchButton.setText("Auto Stretch");
        AutoStretchButton.setToolTipText("Automatically adjust contrast and brightness of image based on a JunoCam specficic preset.");
        AutoStretchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoStretchButtonActionPerformed(evt);
            }
        });
        Processing_Menu.add(AutoStretchButton);
        Processing_Menu.add(jSeparator5);

        ManualColorBalanceButton.setText("Manual color balance");
        ManualColorBalanceButton.setToolTipText("Manually balance colours of image. Use for RGB composites");
        ManualColorBalanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManualColorBalanceButtonActionPerformed(evt);
            }
        });
        Processing_Menu.add(ManualColorBalanceButton);

        ManualContrastButton.setText("Manual contrast");
        ManualContrastButton.setToolTipText("Manually adjust contrast of image.");
        ManualContrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManualContrastButtonActionPerformed(evt);
            }
        });
        Processing_Menu.add(ManualContrastButton);
        Processing_Menu.add(jSeparator3);

        SetProcessingParamButton.setText("Set parameters");
        SetProcessingParamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetProcessingParamButtonActionPerformed(evt);
            }
        });
        Processing_Menu.add(SetProcessingParamButton);

        SharpenButton.setText("Sharpen");
        SharpenButton.setToolTipText("Apply unsharp mask filter with parameters from GUI input");
        SharpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SharpenButtonActionPerformed(evt);
            }
        });
        Processing_Menu.add(SharpenButton);

        Denoise_Button.setText("Denoise");
        Denoise_Button.setToolTipText("Apply box  blur filter with parameters from GUI input for denoising");
        Denoise_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Denoise_ButtonActionPerformed(evt);
            }
        });
        Processing_Menu.add(Denoise_Button);
        Processing_Menu.add(jSeparator2);

        jMenuItem3.setText("Add EXIF to image");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        Processing_Menu.add(jMenuItem3);
        Processing_Menu.add(jSeparator6);

        Reset_Button.setText("Reset");
        Reset_Button.setToolTipText("Reload RAW image to remove all effects of processing.");
        Reset_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reset_ButtonActionPerformed(evt);
            }
        });
        Processing_Menu.add(Reset_Button);

        jMenuBar1.add(Processing_Menu);

        SettingsMenu.setBackground(new java.awt.Color(22, 28, 31));
        SettingsMenu.setForeground(new java.awt.Color(240, 240, 240));
        SettingsMenu.setText("Settings");

        IMGPathButton.setText("Set Path to IMG Loader");
        IMGPathButton.setToolTipText("Set the path to folder where Image Loading software is contained.");
        IMGPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMGPathButtonActionPerformed(evt);
            }
        });
        SettingsMenu.add(IMGPathButton);

        SetDefaultPathToIMGLoaderButton.setText("Set Default Path to IMG Loader");
        SetDefaultPathToIMGLoaderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetDefaultPathToIMGLoaderButtonActionPerformed(evt);
            }
        });
        SettingsMenu.add(SetDefaultPathToIMGLoaderButton);

        jMenu1.setText("CH4");

        CH4Checkbox.setText("CH4 Input");
        CH4Checkbox.setToolTipText("Mark this checkbox if the input file is a JunoCam CH4 Methane band image");
        CH4Checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CH4CheckboxActionPerformed(evt);
            }
        });
        jMenu1.add(CH4Checkbox);

        CH4_Aligment_Checkbox.setText("CH4 non-linear horizontal aligment");
        CH4_Aligment_Checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CH4_Aligment_CheckboxActionPerformed(evt);
            }
        });
        jMenu1.add(CH4_Aligment_Checkbox);

        SettingsMenu.add(jMenu1);

        jMenuBar1.add(SettingsMenu);

        BatchMenu.setBackground(new java.awt.Color(22, 28, 31));
        BatchMenu.setForeground(new java.awt.Color(240, 240, 240));
        BatchMenu.setText("Batch");

        BatchInputButton.setText("Set input path");
        BatchInputButton.setToolTipText("Set path to folder with batch inputs.");
        BatchInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BatchInputButtonActionPerformed(evt);
            }
        });
        BatchMenu.add(BatchInputButton);

        BatchOutputButton.setText("Set output path");
        BatchOutputButton.setToolTipText("Set path to folder with batch outputs.");
        BatchOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BatchOutputButtonActionPerformed(evt);
            }
        });
        BatchMenu.add(BatchOutputButton);
        BatchMenu.add(jSeparator4);

        BatchExecButton.setText("Execute batch");
        BatchExecButton.setToolTipText("Run batch processing on all files in input folder (Assemble framelets and combine RGB)");
        BatchExecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BatchExecButtonActionPerformed(evt);
            }
        });
        BatchMenu.add(BatchExecButton);

        jMenuBar1.add(BatchMenu);

        HelpMenu.setText("Help");

        FAQButton.setText("Open FAQ");
        FAQButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FAQButtonActionPerformed(evt);
            }
        });
        HelpMenu.add(FAQButton);

        jMenuBar1.add(HelpMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadPNGButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadPNGButtonActionPerformed

        if(CH4Checkbox.isSelected()==false)
        { System.out.println("CH4CHECKBOXFALSE");
        jLabel1.setText(null);
         Blue_Button.setEnabled(false);
      Green_Button.setEnabled(false);
      Red_Button.setEnabled(false);
        BalanceButton.setEnabled(false);
          fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES); //back to files  opening
        int returnVal = fileChooser.showOpenDialog(this); //value for opening of file
    if (returnVal == JFileChooser.APPROVE_OPTION) { //if opening was OK
        File file = fileChooser.getSelectedFile(); //Creates file from path
      tempPath=(file.getPath()); //saves path to variable for future use
         try { //tries to load Image and process it
             BufferedImage i=LoadImage.readImg(file);  //loads image into file
             Engine.setRAWFilePath(tempPath);
             //setImagePrev(Scalr.resize(i, Scalr.Method.SPEED, 650));
             Engine.setTempDisp(i); //passes the loaded image into Temp variable of Engine for processing
             Engine.AssembleFrames(i);  //assemble frames that are in engine after loading
             Engine.processed=false; //sets processed state to false after loading new image
             
             
         } catch (IOException ex) {
             Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
         }   catch (InterruptedException ex) {
                 Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
             }
      Blue_Button.setEnabled(true);
      Green_Button.setEnabled(true);
      Red_Button.setEnabled(true);
      Green_Button.setSelected(true);
    }
        }
        else if (CH4Checkbox.isSelected()==true)
    {
        {
      //  Blue_Button.setEnabled(false);
     // Green_Button.setEnabled(false);
     // Red_Button.setEnabled(false);
        System.out.println("CH4CHECKBOXTRUE");
      jLabel1.setText(null);
        int returnVal = fileChooser.showOpenDialog(this); //value for opening of file
    if (returnVal == JFileChooser.APPROVE_OPTION) { //if opening was OK
        File file = fileChooser.getSelectedFile(); //Creates file from path
      tempPath=(file.getPath()); //saves path to variable for future use
         try { //tries to load Image and process it
             BufferedImage i=LoadImage.readImg(file);  //loads image into file
             Engine.setRAWFilePath(tempPath);
             //setImagePrev(Scalr.resize(i, Scalr.Method.SPEED, 650));
             Engine.setTempDisp(i); //passes the loaded image into Temp variable of Engine for processing
             Engine.AssembleFramesOfCH4(i);  //assemble frames that are in engine after loading

      }     catch (IOException ex) {
                Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
        }
} 

    }//GEN-LAST:event_LoadPNGButtonActionPerformed

    private void LoadLBLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadLBLButtonActionPerformed
  int returnVal = fileChooser.showOpenDialog(this);  //opens a file Chooser dialogue
    if (returnVal == JFileChooser.APPROVE_OPTION) { //if file opening is true
        File file = fileChooser.getSelectedFile();  //parses opened file into variable
      System.out.println(file.getName()); //test print of file name
         
            LBL_TextArea.setText(LoadLbl.read(file.getPath()));  //Sets LBL reading area text by using LoadLbl.read Method from file path
            LoadImage.setLBLPath(file.getAbsolutePath()); //sets Path to loaded label for image loader
         }    
    }//GEN-LAST:event_LoadLBLButtonActionPerformed

    private void Denoise_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Denoise_ButtonActionPerformed
      
        try {
            Engine.denoise(Amount,radius);
        } catch (IOException ex) {
            Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Denoise_ButtonActionPerformed

    private void RGB_Combine_VariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RGB_Combine_VariableActionPerformed
        try {
            Engine.assembleRGB();
            RGB_Button.setEnabled(true);
           
        
        } catch (IOException ex) {
            Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RGB_Combine_VariableActionPerformed

    private void SharpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SharpenButtonActionPerformed
        Engine.sharpen(Amount,radius);
    }//GEN-LAST:event_SharpenButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        int returnVal = fileChooser.showSaveDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String path=((fileChooser.getSelectedFile().getPath()));
                System.out.println(path);
                SaveImg.toFile(path+".png");
            } catch (IOException ex) {
                Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
            }

    }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void Reset_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reset_ButtonActionPerformed
        
        try {
            //                    try { //tries to load Image and process it
//             BufferedImage i=LoadImage.readImg(new File(tempPath));  //loads previous image into file from path (to reset)
//             setImagePrev(Scalr.resize(i, Scalr.Method.SPEED, 650));  //sets thumbnail preview in GUI
//             Engine.setTempDisp(i); //passes the loaded image into Temp variable of Engine for processing
//             Engine.AssembleFrames(i);  //assemble frames that are in engine after loading
//
//             
//         } catch (IOException ex) {
//             Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
//         }
//

Engine.resetToRaw();
RGB_Button.setEnabled(false);
Green_Button.setSelected(true);
   BalanceButton.setEnabled(false);
// GUI_Window.setImagePrev(Engine.getTempDisp());
        } catch (IOException ex) {
            Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
        }
                    
                    
                    
    }//GEN-LAST:event_Reset_ButtonActionPerformed

    private void SaveRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveRGBActionPerformed
           int returnVal = fileChooser.showSaveDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String path=((fileChooser.getSelectedFile().getPath()));
           
                SaveImg.toFilesRGB(path);
            } catch (IOException ex) {
                Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    }//GEN-LAST:event_SaveRGBActionPerformed

    private void jPanel1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentResized
        setImagePrev(Engine.getTempDisp());
        jScrollPane2.setAutoscrolls(true);
    }//GEN-LAST:event_jPanel1ComponentResized

    private void RGB_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RGB_ButtonActionPerformed
        BufferedImage temp=Engine.getRGB();
        setImagePrev(temp); //sets image preview to currently selected image
        Engine.setTempDisp(temp); //passes the selected image to Engine
         if (RGB_Button.isSelected()==true) BalanceButton.setEnabled(true);
         
        
    }//GEN-LAST:event_RGB_ButtonActionPerformed

    private void Blue_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Blue_ButtonActionPerformed

        BufferedImage temp=Engine.getSpectralChannels()[1];
        setImagePrev(temp); //sets image preview to currently selected image
        Engine.setTempDisp(temp); //passes the selected image to Engine
        BalanceButton.setEnabled(false); //disable ability to fix colour balance
    }//GEN-LAST:event_Blue_ButtonActionPerformed

    private void Green_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Green_ButtonActionPerformed
        System.out.println("Green performed");
        BufferedImage temp=Engine.getSpectralChannels()[0];
        setImagePrev(temp); //sets image preview to currently selected image
        Engine.setTempDisp(temp); //passes the selected image to Engine
        BalanceButton.setEnabled(false); //disable ability to fix colour balance

    }//GEN-LAST:event_Green_ButtonActionPerformed

    private void Red_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Red_ButtonActionPerformed
        System.out.println("RedPerformed");
        BufferedImage temp=Engine.getSpectralChannels()[2];
        setImagePrev(temp); //sets image preview to currently selected image
        Engine.setTempDisp(temp); //passes the selected image to Engine
        BalanceButton.setEnabled(false); //disable ability to fix colour balance

    }//GEN-LAST:event_Red_ButtonActionPerformed

    private void File_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_MenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_File_MenuActionPerformed

    private void IMGPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMGPathButtonActionPerformed
    fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  //allow only to point to directories
        int returnVal = fileChooser.showOpenDialog(this); //value for opening of file
    if (returnVal == JFileChooser.APPROVE_OPTION) { //if opening was OK
        File file = fileChooser.getCurrentDirectory(); //Creates file from path
        LoadImage.setPathToProcessorFolder(file.getAbsolutePath()); //sets path to IMG Converter folder
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES); //back to files  opening

    }
    }//GEN-LAST:event_IMGPathButtonActionPerformed

    private void BalanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BalanceButtonActionPerformed
      Engine.colourBalance();
    }//GEN-LAST:event_BalanceButtonActionPerformed

    private void AutoStretchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoStretchButtonActionPerformed
Engine.contrast();
    }//GEN-LAST:event_AutoStretchButtonActionPerformed

    private void BatchInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BatchInputButtonActionPerformed
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  //allow only to point to directories
        int returnVal = fileChooser.showOpenDialog(this); //value for opening of file
    if (returnVal == JFileChooser.APPROVE_OPTION) { //if opening was OK
        File file = fileChooser.getSelectedFile(); //Creates file from path
        inputPathBatch=(file.getAbsolutePath()); //sets path to batch input directory
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY); //back to files only opening
            System.out.println(inputPathBatch);
    } 
    }//GEN-LAST:event_BatchInputButtonActionPerformed

    private void BatchOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BatchOutputButtonActionPerformed
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  //allow only to point to directories
        int returnVal = fileChooser.showOpenDialog(this); //value for opening of file
    if (returnVal == JFileChooser.APPROVE_OPTION) { //if opening was OK
        File file = fileChooser.getSelectedFile(); //Creates file from path
        outputPathBatch=(file.getAbsolutePath()); //sets path to batch input directory
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY); //back to files only opening
                System.out.println(outputPathBatch);
    } 
    }//GEN-LAST:event_BatchOutputButtonActionPerformed

    private void BatchExecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BatchExecButtonActionPerformed
        try {
            Engine.batchProcessRAWPNGtoRGBComposites(inputPathBatch, outputPathBatch);  //execute Batch from Engine
            System.out.println("EXEC");
        } catch (IOException ex) {
            Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BatchExecButtonActionPerformed

    private void CH4CheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CH4CheckboxActionPerformed
    }//GEN-LAST:event_CH4CheckboxActionPerformed

    private void CH4_Aligment_CheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CH4_Aligment_CheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CH4_Aligment_CheckboxActionPerformed

    private void ManualColorBalanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManualColorBalanceButtonActionPerformed
colorSliderFrame.setVisible(true);
        
    }//GEN-LAST:event_ManualColorBalanceButtonActionPerformed

    private void Processing_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Processing_MenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Processing_MenuActionPerformed

    private void RSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_RSliderStateChanged
       R=RSlider.getValue();
    }//GEN-LAST:event_RSliderStateChanged

    private void GSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GSliderStateChanged
       G=GSlider.getValue();
    }//GEN-LAST:event_GSliderStateChanged

    private void BSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BSliderStateChanged
         B=BSlider.getValue();
    }//GEN-LAST:event_BSliderStateChanged

    private void Preview_ColourBalanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Preview_ColourBalanceButtonActionPerformed
Engine.colourBalance(R/100, G/100, B/100);
    }//GEN-LAST:event_Preview_ColourBalanceButtonActionPerformed

    private void ManualContrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManualContrastButtonActionPerformed
ContrastFrame.setVisible(true);
  Engine.uncontrasted=Engine.copyImage(Engine.tempDisp);  //copy reference to uncontrasted so work can be done
    }//GEN-LAST:event_ManualContrastButtonActionPerformed

    private void Apply_ColourBalanceButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Apply_ColourBalanceButton1ActionPerformed
        //Engine.tempDisp=Engine.unbalanced;
        Engine.RGB=Engine.tempDisp;
        
        colorSliderFrame.setVisible(false);
    }//GEN-LAST:event_Apply_ColourBalanceButton1ActionPerformed

    private void ContrastSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ContrastSliderStateChanged
contrast=ContrastSlider.getValue();
    }//GEN-LAST:event_ContrastSliderStateChanged

    private void BrightnessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BrightnessSliderStateChanged
brightness=BrightnessSlider.getValue();
    }//GEN-LAST:event_BrightnessSliderStateChanged

    private void Preview_ContrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Preview_ContrastButtonActionPerformed
Engine.contrast(contrast/100, brightness/100);  //apply contrast and brightness with scaling to float
System.out.println(contrast/100);
System.out.println(brightness/100);
System.out.println("Contrasted");
    }//GEN-LAST:event_Preview_ContrastButtonActionPerformed

    private void Apply_ContrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Apply_ContrastButtonActionPerformed
ContrastFrame.setVisible(false);
Engine.unbalanced=Engine.copyImage(Engine.tempDisp);  //update both images in Engine so that they don't interfere
Engine.uncontrasted=Engine.copyImage(Engine.tempDisp);

    }//GEN-LAST:event_Apply_ContrastButtonActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
       Engine.WriteTextOnImg( Engine.tempDisp);
       GUI_Window.setImagePrev(Engine.tempDisp);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void RadiusLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadiusLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadiusLabelActionPerformed

    private void AmountLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AmountLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AmountLabelActionPerformed

    private void RadiusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_RadiusSliderStateChanged
        radius=RadiusSlider.getValue();
        RadiusLabel.setText(""+radius);
    }//GEN-LAST:event_RadiusSliderStateChanged

    private void AmountSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_AmountSliderStateChanged
        Amount=AmountSlider.getValue();
        AmountLabel.setText(""+Amount);
    }//GEN-LAST:event_AmountSliderStateChanged

    private void ApplyProcessingParamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyProcessingParamButtonActionPerformed
SharpenAndDenoiseFrame.setVisible(false);    }//GEN-LAST:event_ApplyProcessingParamButtonActionPerformed

    private void SetProcessingParamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetProcessingParamButtonActionPerformed
//SharpenAndDenoiseFrame.setSize(600,400); //set size
SharpenAndDenoiseFrame.setVisible(true); //open frame for changing values
    }//GEN-LAST:event_SetProcessingParamButtonActionPerformed

    private void ProcessingValuesPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ProcessingValuesPanelComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_ProcessingValuesPanelComponentResized

    private void SharpenAndDenoiseFrameComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_SharpenAndDenoiseFrameComponentResized
    }//GEN-LAST:event_SharpenAndDenoiseFrameComponentResized

    private void FAQButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FAQButtonActionPerformed
HelpFrame.setVisible(true);
    }//GEN-LAST:event_FAQButtonActionPerformed

    private void SetDefaultPathToIMGLoaderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetDefaultPathToIMGLoaderButtonActionPerformed
  ObjectOutputStream os;
        try {    
            os = new ObjectOutputStream(
                    new BufferedOutputStream(new FileOutputStream("settings.stg")));
        
        
         os.writeObject(new Settings(JOptionPane.showInputDialog("Please input path to IMG loader")));
         os.close();        // TODO add your handling code here:
         } catch (IOException ex) {
            Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_SetDefaultPathToIMGLoaderButtonActionPerformed
    static void setImagePrev(BufferedImage img)
    { 
     jLabel1.setIcon(new ImageIcon(Scalr.resize(img, Scalr.Method.SPEED, jLabel1.getHeight())));
    }
      static void setRGBButtonState(boolean state) //sets if button for RGB should be grayed out or not
     {
                    RGB_Button.setEnabled(state);
      
     }
       public static boolean getCH4AligmentCheckboxState()
     {
         return CH4_Aligment_Checkbox.isSelected();
     }
     
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new GUI_Window().setVisible(true);
                    Settings stg; //defines settings object
                    
                    stg = Settings.loadSettings(); //loads the settings with path to img loader from a file at same location as app
                    
                    LoadImage.setPathToProcessorFolder(stg.getPathToIMGLoader()); //sets the path to IMGConverter from read-out settings
                    //System.out.println(stg.getPathToIMGLoader());
                    jLabel1.setText("AWAITING IMAGE LOADING");
                } catch (IOException ex) {
                    Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(GUI_Window.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AmountLabel;
    private javax.swing.JSlider AmountSlider;
    private javax.swing.JButton ApplyProcessingParamButton;
    private javax.swing.JButton Apply_ColourBalanceButton1;
    private javax.swing.JButton Apply_ContrastButton;
    private javax.swing.JMenuItem AutoStretchButton;
    private javax.swing.JSlider BSlider;
    private javax.swing.JMenuItem BalanceButton;
    private javax.swing.JMenuItem BatchExecButton;
    private javax.swing.JMenuItem BatchInputButton;
    private javax.swing.JMenu BatchMenu;
    private javax.swing.JMenuItem BatchOutputButton;
    public static javax.swing.JRadioButton Blue_Button;
    private javax.swing.JSlider BrightnessSlider;
    public static javax.swing.JCheckBoxMenuItem CH4Checkbox;
    public static javax.swing.JCheckBoxMenuItem CH4_Aligment_Checkbox;
    private javax.swing.JFrame ContrastFrame;
    private javax.swing.JSlider ContrastSlider;
    private javax.swing.JMenuItem Denoise_Button;
    private javax.swing.JMenuItem FAQButton;
    private javax.swing.JMenu File_Menu;
    private javax.swing.JSlider GSlider;
    public static javax.swing.JRadioButton Green_Button;
    private javax.swing.JFrame HelpFrame;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JTextArea HelpTextArea;
    private javax.swing.JMenuItem IMGPathButton;
    private javax.swing.JTextArea LBL_TextArea;
    private javax.swing.JMenuItem LoadLBLButton;
    private javax.swing.JMenuItem LoadPNGButton;
    private javax.swing.JMenuItem ManualColorBalanceButton;
    private javax.swing.JMenuItem ManualContrastButton;
    private javax.swing.JButton Preview_ColourBalanceButton;
    private javax.swing.JButton Preview_ContrastButton;
    private javax.swing.JPanel ProcessingValuesPanel;
    private javax.swing.JMenu Processing_Menu;
    public static javax.swing.JRadioButton RGB_Button;
    private javax.swing.JMenuItem RGB_Combine_Variable;
    private javax.swing.JSlider RSlider;
    private javax.swing.JTextField RadiusLabel;
    private javax.swing.JSlider RadiusSlider;
    public static javax.swing.JRadioButton Red_Button;
    private javax.swing.JMenuItem Reset_Button;
    private javax.swing.JMenuItem SaveButton;
    private javax.swing.JMenuItem SaveRGB;
    private javax.swing.JMenuItem SetDefaultPathToIMGLoaderButton;
    private javax.swing.JMenuItem SetProcessingParamButton;
    private javax.swing.JMenu SettingsMenu;
    private javax.swing.JFrame SharpenAndDenoiseFrame;
    private javax.swing.JMenuItem SharpenButton;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JFrame colorSliderFrame;
    private javax.swing.JFileChooser fileChooser;
    public static javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    // End of variables declaration//GEN-END:variables
}
